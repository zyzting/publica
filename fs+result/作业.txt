
1.demo2.js
执行结果是：1 3 2
原因：这是同步，从上到下依次执行，在setTimeout（）中，异步，
先执行回调函数，存放在队列里，现在是1 回调 3 ，然后定时器里按同步执行，所以结果为1 3 2


2.demo3.js
执行结果：2 1
原因：代码是按同步执行的，setTimeout（）里的回调先存放在队列里，然后执行console.log(2);
最后在执行1；所以最后结果是2 1.


3.demo4.js
执行结果：1 2 333
原因：process.nextTick（）总是在执行栈的尾部触发，先进行同步，然后在执行栈里面的，就把1 、2 执行完了，
在同步执行333